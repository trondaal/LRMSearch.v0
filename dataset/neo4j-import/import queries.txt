MATCH (n)
DETACH DELETE n;

DROP INDEX expressions;
DROP INDEX resource_uri;

CREATE INDEX resource_uri FOR (n:Resource) ON n.uri;
CREATE FULLTEXT INDEX expressions FOR (n:Expression) ON EACH [n.title, n.titles, n.titlevariant, n.titlepreferred, n.names, n.types];

WITH "entities.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.entity.value as u, e.label.value as l
CALL apoc.merge.node(["Resource", l], {uri: u})
YIELD node
RETURN node;

WITH "concepts.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.concept.value as u, e.label.value as l
CALL apoc.merge.node(["Concept"], {uri: u, label: l})
YIELD node
RETURN node;

WITH "types.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.s.value as source, e.p.value as property, e.l.value as label, e.o.value as object
MATCH
  (s:Resource {uri: source}),
  (o:Concept {uri: object})
CALL apoc.merge.relationship(s, label,{type: property}, {}, o, {}) yield rel
RETURN rel;

WITH "properties.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.entity.value as u, e.label.value as l, e.value.value as v
MERGE (x:Resource {uri: u})
WITH x, l, v
CALL apoc.create.setProperty(x, l, v)
YIELD node
RETURN node;

WITH "basicrels.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.s.value as source, e.l.value as r, e.o.value as object
MATCH
  (s:Resource {uri: source}),
  (o:Resource {uri: object})
CALL apoc.merge.relationship(s, r,{}, {}, o, {}) yield rel
RETURN rel;


WITH "agentrels.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.s.value as source, e.p.value as property, e.l.value as label, e.o.value as object
MATCH
  (s:Resource {uri: source}),
  (o:Resource {uri: object})
  CALL apoc.create.relationship(s, "CREATOR",{type: property, role: label}, o) yield rel
RETURN rel;

WITH "subjectrels.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.s.value as source, e.p.value as property, e.l.value as label, e.o.value as object
MATCH
  (s:Resource {uri: source}),
  (o:Resource {uri: object})
  CALL apoc.create.relationship(s, "SUBJECT",{type: property, role: label}, o) yield rel
RETURN rel;

WITH "partofrels.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.s.value as source, e.p.value as property, e.l.value as label, e.o.value as object
MATCH
  (s:Resource {uri: source}),
  (o:Resource {uri: object})
  CALL apoc.create.relationship(s, "PARTOF",{type: property, role: label}, o) yield rel
RETURN rel;

WITH "workrels.json" AS url
CALL apoc.load.json(url) YIELD value
UNWIND value.results.bindings AS e
WITH e.s.value as source, e.p.value as property, e.l.value as label, e.o.value as object
MATCH
  (s:Resource {uri: source}),
  (o:Resource {uri: object})
  CALL apoc.create.relationship(s, "RELATED",{type: property, role: label}, o) yield rel
RETURN rel;


//UPDATE FIELDS FOR FULLTEXT INDEXING OF NODES
//NAMES
MATCH (e:Expression)
set e.names = "";
MATCH (e:Expression)-[:CREATOR]-(a:Agent)
set e.names = e.names + " ; " + a.name;
MATCH (e:Expression)-[:REALIZES]-(w:Work)-[:CREATOR]-(a:Agent)
set e.names = e.names + " ; " + a.name;
MATCH (e:Expression)-[:EMBODIES]-(m:Manifestation)-[:CREATOR]-(a:Agent)
set e.names = e.names + " ; " + a.name;
MATCH (e:Expression)-[:REALIZES]-(w:Work)-[:SUBJECT]-(a:Agent)
set e.names = e.names + " ; " + a.name;
MATCH (e:Expression)-[:REALIZES]-(w:Work)-[:RELATED]->(:Work)-[:CREATOR]-(a:Agent)
set e.names = e.names + " ; " + a.name;
MATCH (e:Expression)-[:REALIZES]-(w:Work)-[:PARTOF]-(:Work)-[:CREATOR]-(a:Agent)
set e.names = e.names + " ; " + a.name;


MATCH (e:Expression)
set e.titles = "";
MATCH (e:Expression)-[:REALIZES]-(w:Work)
set e.titles = e.titles + " ; " + w.title + " (W)";
MATCH (e:Expression)-[:EMBODIES]-(m:Manifestation)
set e.titles = e.titles + " ; " + m.title + " (M";
MATCH (e:Expression)-[:REALIZES]-(:Work)-[:SUBJECT]-(w:Work)
set e.titles = e.titles + " ; " + w.title + " (S)";
MATCH (e:Expression)-[:REALIZES]-(:Work)-[:RELATED]->(w:Work)
set e.titles = e.titles + " ; " + w.title + " (R)";
MATCH (e:Expression)-[:REALIZES]-(:Work)-[:PARTOF]-(w:Work)
set e.titles = e.titles + " ; " + w.title + " (P)";



